// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rebel-l/schema/store (interfaces: DatabaseConnector)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseConnector is a mock of DatabaseConnector interface
type MockDatabaseConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseConnectorMockRecorder
}

// MockDatabaseConnectorMockRecorder is the mock recorder for MockDatabaseConnector
type MockDatabaseConnectorMockRecorder struct {
	mock *MockDatabaseConnector
}

// NewMockDatabaseConnector creates a new mock instance
func NewMockDatabaseConnector(ctrl *gomock.Controller) *MockDatabaseConnector {
	mock := &MockDatabaseConnector{ctrl: ctrl}
	mock.recorder = &MockDatabaseConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseConnector) EXPECT() *MockDatabaseConnectorMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockDatabaseConnector) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDatabaseConnectorMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabaseConnector)(nil).Exec), varargs...)
}

// Get mocks base method
func (m *MockDatabaseConnector) Get(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDatabaseConnectorMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabaseConnector)(nil).Get), varargs...)
}

// Select mocks base method
func (m *MockDatabaseConnector) Select(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockDatabaseConnectorMockRecorder) Select(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabaseConnector)(nil).Select), varargs...)
}
