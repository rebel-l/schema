// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Go/src/database/sql/driver/driver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	driver "database/sql/driver"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValue is a mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockDriver) Open(name string) (driver.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(driver.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockDriverMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDriver)(nil).Open), name)
}

// MockDriverContext is a mock of DriverContext interface
type MockDriverContext struct {
	ctrl     *gomock.Controller
	recorder *MockDriverContextMockRecorder
}

// MockDriverContextMockRecorder is the mock recorder for MockDriverContext
type MockDriverContextMockRecorder struct {
	mock *MockDriverContext
}

// NewMockDriverContext creates a new mock instance
func NewMockDriverContext(ctrl *gomock.Controller) *MockDriverContext {
	mock := &MockDriverContext{ctrl: ctrl}
	mock.recorder = &MockDriverContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriverContext) EXPECT() *MockDriverContextMockRecorder {
	return m.recorder
}

// OpenConnector mocks base method
func (m *MockDriverContext) OpenConnector(name string) (driver.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenConnector", name)
	ret0, _ := ret[0].(driver.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenConnector indicates an expected call of OpenConnector
func (mr *MockDriverContextMockRecorder) OpenConnector(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConnector", reflect.TypeOf((*MockDriverContext)(nil).OpenConnector), name)
}

// MockConnector is a mock of Connector interface
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockConnector) Connect(arg0 context.Context) (driver.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(driver.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockConnectorMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnector)(nil).Connect), arg0)
}

// Driver mocks base method
func (m *MockConnector) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver
func (mr *MockConnectorMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockConnector)(nil).Driver))
}

// MockPinger is a mock of Pinger interface
type MockPinger struct {
	ctrl     *gomock.Controller
	recorder *MockPingerMockRecorder
}

// MockPingerMockRecorder is the mock recorder for MockPinger
type MockPingerMockRecorder struct {
	mock *MockPinger
}

// NewMockPinger creates a new mock instance
func NewMockPinger(ctrl *gomock.Controller) *MockPinger {
	mock := &MockPinger{ctrl: ctrl}
	mock.recorder = &MockPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPinger) EXPECT() *MockPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockPinger) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockPingerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPinger)(nil).Ping), ctx)
}

// MockExecer is a mock of Execer interface
type MockExecer struct {
	ctrl     *gomock.Controller
	recorder *MockExecerMockRecorder
}

// MockExecerMockRecorder is the mock recorder for MockExecer
type MockExecerMockRecorder struct {
	mock *MockExecer
}

// NewMockExecer creates a new mock instance
func NewMockExecer(ctrl *gomock.Controller) *MockExecer {
	mock := &MockExecer{ctrl: ctrl}
	mock.recorder = &MockExecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecer) EXPECT() *MockExecerMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockExecer) Exec(query string, args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", query, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockExecerMockRecorder) Exec(query, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecer)(nil).Exec), query, args)
}

// MockExecerContext is a mock of ExecerContext interface
type MockExecerContext struct {
	ctrl     *gomock.Controller
	recorder *MockExecerContextMockRecorder
}

// MockExecerContextMockRecorder is the mock recorder for MockExecerContext
type MockExecerContextMockRecorder struct {
	mock *MockExecerContext
}

// NewMockExecerContext creates a new mock instance
func NewMockExecerContext(ctrl *gomock.Controller) *MockExecerContext {
	mock := &MockExecerContext{ctrl: ctrl}
	mock.recorder = &MockExecerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecerContext) EXPECT() *MockExecerContextMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *MockExecerContext) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", ctx, query, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockExecerContextMockRecorder) ExecContext(ctx, query, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockExecerContext)(nil).ExecContext), ctx, query, args)
}

// MockQueryer is a mock of Queryer interface
type MockQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer
type MockQueryerMockRecorder struct {
	mock *MockQueryer
}

// NewMockQueryer creates a new mock instance
func NewMockQueryer(ctrl *gomock.Controller) *MockQueryer {
	mock := &MockQueryer{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryer) EXPECT() *MockQueryerMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockQueryer) Query(query string, args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockQueryerMockRecorder) Query(query, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer)(nil).Query), query, args)
}

// MockQueryerContext is a mock of QueryerContext interface
type MockQueryerContext struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerContextMockRecorder
}

// MockQueryerContextMockRecorder is the mock recorder for MockQueryerContext
type MockQueryerContextMockRecorder struct {
	mock *MockQueryerContext
}

// NewMockQueryerContext creates a new mock instance
func NewMockQueryerContext(ctrl *gomock.Controller) *MockQueryerContext {
	mock := &MockQueryerContext{ctrl: ctrl}
	mock.recorder = &MockQueryerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryerContext) EXPECT() *MockQueryerContextMockRecorder {
	return m.recorder
}

// QueryContext mocks base method
func (m *MockQueryerContext) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContext", ctx, query, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockQueryerContextMockRecorder) QueryContext(ctx, query, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockQueryerContext)(nil).QueryContext), ctx, query, args)
}

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Prepare mocks base method
func (m *MockConn) Prepare(query string) (driver.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(driver.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockConnMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockConn)(nil).Prepare), query)
}

// Close mocks base method
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// Begin mocks base method
func (m *MockConn) Begin() (driver.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(driver.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockConnMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockConn)(nil).Begin))
}

// MockConnPrepareContext is a mock of ConnPrepareContext interface
type MockConnPrepareContext struct {
	ctrl     *gomock.Controller
	recorder *MockConnPrepareContextMockRecorder
}

// MockConnPrepareContextMockRecorder is the mock recorder for MockConnPrepareContext
type MockConnPrepareContextMockRecorder struct {
	mock *MockConnPrepareContext
}

// NewMockConnPrepareContext creates a new mock instance
func NewMockConnPrepareContext(ctrl *gomock.Controller) *MockConnPrepareContext {
	mock := &MockConnPrepareContext{ctrl: ctrl}
	mock.recorder = &MockConnPrepareContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnPrepareContext) EXPECT() *MockConnPrepareContextMockRecorder {
	return m.recorder
}

// PrepareContext mocks base method
func (m *MockConnPrepareContext) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(driver.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext
func (mr *MockConnPrepareContextMockRecorder) PrepareContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockConnPrepareContext)(nil).PrepareContext), ctx, query)
}

// MockConnBeginTx is a mock of ConnBeginTx interface
type MockConnBeginTx struct {
	ctrl     *gomock.Controller
	recorder *MockConnBeginTxMockRecorder
}

// MockConnBeginTxMockRecorder is the mock recorder for MockConnBeginTx
type MockConnBeginTxMockRecorder struct {
	mock *MockConnBeginTx
}

// NewMockConnBeginTx creates a new mock instance
func NewMockConnBeginTx(ctrl *gomock.Controller) *MockConnBeginTx {
	mock := &MockConnBeginTx{ctrl: ctrl}
	mock.recorder = &MockConnBeginTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnBeginTx) EXPECT() *MockConnBeginTxMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *MockConnBeginTx) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(driver.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockConnBeginTxMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockConnBeginTx)(nil).BeginTx), ctx, opts)
}

// MockSessionResetter is a mock of SessionResetter interface
type MockSessionResetter struct {
	ctrl     *gomock.Controller
	recorder *MockSessionResetterMockRecorder
}

// MockSessionResetterMockRecorder is the mock recorder for MockSessionResetter
type MockSessionResetterMockRecorder struct {
	mock *MockSessionResetter
}

// NewMockSessionResetter creates a new mock instance
func NewMockSessionResetter(ctrl *gomock.Controller) *MockSessionResetter {
	mock := &MockSessionResetter{ctrl: ctrl}
	mock.recorder = &MockSessionResetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionResetter) EXPECT() *MockSessionResetterMockRecorder {
	return m.recorder
}

// ResetSession mocks base method
func (m *MockSessionResetter) ResetSession(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSession", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetSession indicates an expected call of ResetSession
func (mr *MockSessionResetterMockRecorder) ResetSession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSession", reflect.TypeOf((*MockSessionResetter)(nil).ResetSession), ctx)
}

// MockResult is a mock of Result interface
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
}

// MockResultMockRecorder is the mock recorder for MockResult
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResult) EXPECT() *MockResultMockRecorder {
	return m.recorder
}

// LastInsertId mocks base method
func (m *MockResult) LastInsertId() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastInsertId")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastInsertId indicates an expected call of LastInsertId
func (mr *MockResultMockRecorder) LastInsertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInsertId", reflect.TypeOf((*MockResult)(nil).LastInsertId))
}

// RowsAffected mocks base method
func (m *MockResult) RowsAffected() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowsAffected indicates an expected call of RowsAffected
func (mr *MockResultMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockResult)(nil).RowsAffected))
}

// MockStmt is a mock of Stmt interface
type MockStmt struct {
	ctrl     *gomock.Controller
	recorder *MockStmtMockRecorder
}

// MockStmtMockRecorder is the mock recorder for MockStmt
type MockStmtMockRecorder struct {
	mock *MockStmt
}

// NewMockStmt creates a new mock instance
func NewMockStmt(ctrl *gomock.Controller) *MockStmt {
	mock := &MockStmt{ctrl: ctrl}
	mock.recorder = &MockStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmt) EXPECT() *MockStmtMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmt) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmt)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmt) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmt)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmt) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmt)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmt) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmt)(nil).Query), args)
}

// MockStmtExecContext is a mock of StmtExecContext interface
type MockStmtExecContext struct {
	ctrl     *gomock.Controller
	recorder *MockStmtExecContextMockRecorder
}

// MockStmtExecContextMockRecorder is the mock recorder for MockStmtExecContext
type MockStmtExecContextMockRecorder struct {
	mock *MockStmtExecContext
}

// NewMockStmtExecContext creates a new mock instance
func NewMockStmtExecContext(ctrl *gomock.Controller) *MockStmtExecContext {
	mock := &MockStmtExecContext{ctrl: ctrl}
	mock.recorder = &MockStmtExecContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtExecContext) EXPECT() *MockStmtExecContextMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *MockStmtExecContext) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", ctx, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockStmtExecContextMockRecorder) ExecContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockStmtExecContext)(nil).ExecContext), ctx, args)
}

// MockStmtQueryContext is a mock of StmtQueryContext interface
type MockStmtQueryContext struct {
	ctrl     *gomock.Controller
	recorder *MockStmtQueryContextMockRecorder
}

// MockStmtQueryContextMockRecorder is the mock recorder for MockStmtQueryContext
type MockStmtQueryContextMockRecorder struct {
	mock *MockStmtQueryContext
}

// NewMockStmtQueryContext creates a new mock instance
func NewMockStmtQueryContext(ctrl *gomock.Controller) *MockStmtQueryContext {
	mock := &MockStmtQueryContext{ctrl: ctrl}
	mock.recorder = &MockStmtQueryContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtQueryContext) EXPECT() *MockStmtQueryContextMockRecorder {
	return m.recorder
}

// QueryContext mocks base method
func (m *MockStmtQueryContext) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContext", ctx, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockStmtQueryContextMockRecorder) QueryContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmtQueryContext)(nil).QueryContext), ctx, args)
}

// MockNamedValueChecker is a mock of NamedValueChecker interface
type MockNamedValueChecker struct {
	ctrl     *gomock.Controller
	recorder *MockNamedValueCheckerMockRecorder
}

// MockNamedValueCheckerMockRecorder is the mock recorder for MockNamedValueChecker
type MockNamedValueCheckerMockRecorder struct {
	mock *MockNamedValueChecker
}

// NewMockNamedValueChecker creates a new mock instance
func NewMockNamedValueChecker(ctrl *gomock.Controller) *MockNamedValueChecker {
	mock := &MockNamedValueChecker{ctrl: ctrl}
	mock.recorder = &MockNamedValueCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamedValueChecker) EXPECT() *MockNamedValueCheckerMockRecorder {
	return m.recorder
}

// CheckNamedValue mocks base method
func (m *MockNamedValueChecker) CheckNamedValue(arg0 *driver.NamedValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamedValue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNamedValue indicates an expected call of CheckNamedValue
func (mr *MockNamedValueCheckerMockRecorder) CheckNamedValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamedValue", reflect.TypeOf((*MockNamedValueChecker)(nil).CheckNamedValue), arg0)
}

// MockColumnConverter is a mock of ColumnConverter interface
type MockColumnConverter struct {
	ctrl     *gomock.Controller
	recorder *MockColumnConverterMockRecorder
}

// MockColumnConverterMockRecorder is the mock recorder for MockColumnConverter
type MockColumnConverterMockRecorder struct {
	mock *MockColumnConverter
}

// NewMockColumnConverter creates a new mock instance
func NewMockColumnConverter(ctrl *gomock.Controller) *MockColumnConverter {
	mock := &MockColumnConverter{ctrl: ctrl}
	mock.recorder = &MockColumnConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockColumnConverter) EXPECT() *MockColumnConverterMockRecorder {
	return m.recorder
}

// ColumnConverter mocks base method
func (m *MockColumnConverter) ColumnConverter(idx int) driver.ValueConverter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnConverter", idx)
	ret0, _ := ret[0].(driver.ValueConverter)
	return ret0
}

// ColumnConverter indicates an expected call of ColumnConverter
func (mr *MockColumnConverterMockRecorder) ColumnConverter(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnConverter", reflect.TypeOf((*MockColumnConverter)(nil).ColumnConverter), idx)
}

// MockRows is a mock of Rows interface
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
}

// MockRowsMockRecorder is the mock recorder for MockRows
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockRows) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockRowsMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRows)(nil).Columns))
}

// Close mocks base method
func (m *MockRows) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// Next mocks base method
func (m *MockRows) Next(dest []driver.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsMockRecorder) Next(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next), dest)
}

// MockRowsNextResultSet is a mock of RowsNextResultSet interface
type MockRowsNextResultSet struct {
	ctrl     *gomock.Controller
	recorder *MockRowsNextResultSetMockRecorder
}

// MockRowsNextResultSetMockRecorder is the mock recorder for MockRowsNextResultSet
type MockRowsNextResultSetMockRecorder struct {
	mock *MockRowsNextResultSet
}

// NewMockRowsNextResultSet creates a new mock instance
func NewMockRowsNextResultSet(ctrl *gomock.Controller) *MockRowsNextResultSet {
	mock := &MockRowsNextResultSet{ctrl: ctrl}
	mock.recorder = &MockRowsNextResultSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRowsNextResultSet) EXPECT() *MockRowsNextResultSetMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockRowsNextResultSet) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockRowsNextResultSetMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRowsNextResultSet)(nil).Columns))
}

// Close mocks base method
func (m *MockRowsNextResultSet) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsNextResultSetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsNextResultSet)(nil).Close))
}

// Next mocks base method
func (m *MockRowsNextResultSet) Next(dest []driver.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsNextResultSetMockRecorder) Next(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsNextResultSet)(nil).Next), dest)
}

// HasNextResultSet mocks base method
func (m *MockRowsNextResultSet) HasNextResultSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNextResultSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNextResultSet indicates an expected call of HasNextResultSet
func (mr *MockRowsNextResultSetMockRecorder) HasNextResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNextResultSet", reflect.TypeOf((*MockRowsNextResultSet)(nil).HasNextResultSet))
}

// NextResultSet mocks base method
func (m *MockRowsNextResultSet) NextResultSet() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextResultSet")
	ret0, _ := ret[0].(error)
	return ret0
}

// NextResultSet indicates an expected call of NextResultSet
func (mr *MockRowsNextResultSetMockRecorder) NextResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextResultSet", reflect.TypeOf((*MockRowsNextResultSet)(nil).NextResultSet))
}

// MockRowsColumnTypeScanType is a mock of RowsColumnTypeScanType interface
type MockRowsColumnTypeScanType struct {
	ctrl     *gomock.Controller
	recorder *MockRowsColumnTypeScanTypeMockRecorder
}

// MockRowsColumnTypeScanTypeMockRecorder is the mock recorder for MockRowsColumnTypeScanType
type MockRowsColumnTypeScanTypeMockRecorder struct {
	mock *MockRowsColumnTypeScanType
}

// NewMockRowsColumnTypeScanType creates a new mock instance
func NewMockRowsColumnTypeScanType(ctrl *gomock.Controller) *MockRowsColumnTypeScanType {
	mock := &MockRowsColumnTypeScanType{ctrl: ctrl}
	mock.recorder = &MockRowsColumnTypeScanTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRowsColumnTypeScanType) EXPECT() *MockRowsColumnTypeScanTypeMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockRowsColumnTypeScanType) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockRowsColumnTypeScanTypeMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRowsColumnTypeScanType)(nil).Columns))
}

// Close mocks base method
func (m *MockRowsColumnTypeScanType) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsColumnTypeScanTypeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsColumnTypeScanType)(nil).Close))
}

// Next mocks base method
func (m *MockRowsColumnTypeScanType) Next(dest []driver.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsColumnTypeScanTypeMockRecorder) Next(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsColumnTypeScanType)(nil).Next), dest)
}

// ColumnTypeScanType mocks base method
func (m *MockRowsColumnTypeScanType) ColumnTypeScanType(index int) reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypeScanType", index)
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ColumnTypeScanType indicates an expected call of ColumnTypeScanType
func (mr *MockRowsColumnTypeScanTypeMockRecorder) ColumnTypeScanType(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypeScanType", reflect.TypeOf((*MockRowsColumnTypeScanType)(nil).ColumnTypeScanType), index)
}

// MockRowsColumnTypeDatabaseTypeName is a mock of RowsColumnTypeDatabaseTypeName interface
type MockRowsColumnTypeDatabaseTypeName struct {
	ctrl     *gomock.Controller
	recorder *MockRowsColumnTypeDatabaseTypeNameMockRecorder
}

// MockRowsColumnTypeDatabaseTypeNameMockRecorder is the mock recorder for MockRowsColumnTypeDatabaseTypeName
type MockRowsColumnTypeDatabaseTypeNameMockRecorder struct {
	mock *MockRowsColumnTypeDatabaseTypeName
}

// NewMockRowsColumnTypeDatabaseTypeName creates a new mock instance
func NewMockRowsColumnTypeDatabaseTypeName(ctrl *gomock.Controller) *MockRowsColumnTypeDatabaseTypeName {
	mock := &MockRowsColumnTypeDatabaseTypeName{ctrl: ctrl}
	mock.recorder = &MockRowsColumnTypeDatabaseTypeNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRowsColumnTypeDatabaseTypeName) EXPECT() *MockRowsColumnTypeDatabaseTypeNameMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockRowsColumnTypeDatabaseTypeName) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockRowsColumnTypeDatabaseTypeNameMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRowsColumnTypeDatabaseTypeName)(nil).Columns))
}

// Close mocks base method
func (m *MockRowsColumnTypeDatabaseTypeName) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsColumnTypeDatabaseTypeNameMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsColumnTypeDatabaseTypeName)(nil).Close))
}

// Next mocks base method
func (m *MockRowsColumnTypeDatabaseTypeName) Next(dest []driver.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsColumnTypeDatabaseTypeNameMockRecorder) Next(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsColumnTypeDatabaseTypeName)(nil).Next), dest)
}

// ColumnTypeDatabaseTypeName mocks base method
func (m *MockRowsColumnTypeDatabaseTypeName) ColumnTypeDatabaseTypeName(index int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypeDatabaseTypeName", index)
	ret0, _ := ret[0].(string)
	return ret0
}

// ColumnTypeDatabaseTypeName indicates an expected call of ColumnTypeDatabaseTypeName
func (mr *MockRowsColumnTypeDatabaseTypeNameMockRecorder) ColumnTypeDatabaseTypeName(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypeDatabaseTypeName", reflect.TypeOf((*MockRowsColumnTypeDatabaseTypeName)(nil).ColumnTypeDatabaseTypeName), index)
}

// MockRowsColumnTypeLength is a mock of RowsColumnTypeLength interface
type MockRowsColumnTypeLength struct {
	ctrl     *gomock.Controller
	recorder *MockRowsColumnTypeLengthMockRecorder
}

// MockRowsColumnTypeLengthMockRecorder is the mock recorder for MockRowsColumnTypeLength
type MockRowsColumnTypeLengthMockRecorder struct {
	mock *MockRowsColumnTypeLength
}

// NewMockRowsColumnTypeLength creates a new mock instance
func NewMockRowsColumnTypeLength(ctrl *gomock.Controller) *MockRowsColumnTypeLength {
	mock := &MockRowsColumnTypeLength{ctrl: ctrl}
	mock.recorder = &MockRowsColumnTypeLengthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRowsColumnTypeLength) EXPECT() *MockRowsColumnTypeLengthMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockRowsColumnTypeLength) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockRowsColumnTypeLengthMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRowsColumnTypeLength)(nil).Columns))
}

// Close mocks base method
func (m *MockRowsColumnTypeLength) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsColumnTypeLengthMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsColumnTypeLength)(nil).Close))
}

// Next mocks base method
func (m *MockRowsColumnTypeLength) Next(dest []driver.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsColumnTypeLengthMockRecorder) Next(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsColumnTypeLength)(nil).Next), dest)
}

// ColumnTypeLength mocks base method
func (m *MockRowsColumnTypeLength) ColumnTypeLength(index int) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypeLength", index)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ColumnTypeLength indicates an expected call of ColumnTypeLength
func (mr *MockRowsColumnTypeLengthMockRecorder) ColumnTypeLength(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypeLength", reflect.TypeOf((*MockRowsColumnTypeLength)(nil).ColumnTypeLength), index)
}

// MockRowsColumnTypeNullable is a mock of RowsColumnTypeNullable interface
type MockRowsColumnTypeNullable struct {
	ctrl     *gomock.Controller
	recorder *MockRowsColumnTypeNullableMockRecorder
}

// MockRowsColumnTypeNullableMockRecorder is the mock recorder for MockRowsColumnTypeNullable
type MockRowsColumnTypeNullableMockRecorder struct {
	mock *MockRowsColumnTypeNullable
}

// NewMockRowsColumnTypeNullable creates a new mock instance
func NewMockRowsColumnTypeNullable(ctrl *gomock.Controller) *MockRowsColumnTypeNullable {
	mock := &MockRowsColumnTypeNullable{ctrl: ctrl}
	mock.recorder = &MockRowsColumnTypeNullableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRowsColumnTypeNullable) EXPECT() *MockRowsColumnTypeNullableMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockRowsColumnTypeNullable) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockRowsColumnTypeNullableMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRowsColumnTypeNullable)(nil).Columns))
}

// Close mocks base method
func (m *MockRowsColumnTypeNullable) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsColumnTypeNullableMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsColumnTypeNullable)(nil).Close))
}

// Next mocks base method
func (m *MockRowsColumnTypeNullable) Next(dest []driver.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsColumnTypeNullableMockRecorder) Next(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsColumnTypeNullable)(nil).Next), dest)
}

// ColumnTypeNullable mocks base method
func (m *MockRowsColumnTypeNullable) ColumnTypeNullable(index int) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypeNullable", index)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ColumnTypeNullable indicates an expected call of ColumnTypeNullable
func (mr *MockRowsColumnTypeNullableMockRecorder) ColumnTypeNullable(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypeNullable", reflect.TypeOf((*MockRowsColumnTypeNullable)(nil).ColumnTypeNullable), index)
}

// MockRowsColumnTypePrecisionScale is a mock of RowsColumnTypePrecisionScale interface
type MockRowsColumnTypePrecisionScale struct {
	ctrl     *gomock.Controller
	recorder *MockRowsColumnTypePrecisionScaleMockRecorder
}

// MockRowsColumnTypePrecisionScaleMockRecorder is the mock recorder for MockRowsColumnTypePrecisionScale
type MockRowsColumnTypePrecisionScaleMockRecorder struct {
	mock *MockRowsColumnTypePrecisionScale
}

// NewMockRowsColumnTypePrecisionScale creates a new mock instance
func NewMockRowsColumnTypePrecisionScale(ctrl *gomock.Controller) *MockRowsColumnTypePrecisionScale {
	mock := &MockRowsColumnTypePrecisionScale{ctrl: ctrl}
	mock.recorder = &MockRowsColumnTypePrecisionScaleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRowsColumnTypePrecisionScale) EXPECT() *MockRowsColumnTypePrecisionScaleMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockRowsColumnTypePrecisionScale) Columns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Columns indicates an expected call of Columns
func (mr *MockRowsColumnTypePrecisionScaleMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRowsColumnTypePrecisionScale)(nil).Columns))
}

// Close mocks base method
func (m *MockRowsColumnTypePrecisionScale) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsColumnTypePrecisionScaleMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsColumnTypePrecisionScale)(nil).Close))
}

// Next mocks base method
func (m *MockRowsColumnTypePrecisionScale) Next(dest []driver.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsColumnTypePrecisionScaleMockRecorder) Next(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsColumnTypePrecisionScale)(nil).Next), dest)
}

// ColumnTypePrecisionScale mocks base method
func (m *MockRowsColumnTypePrecisionScale) ColumnTypePrecisionScale(index int) (int64, int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypePrecisionScale", index)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// ColumnTypePrecisionScale indicates an expected call of ColumnTypePrecisionScale
func (mr *MockRowsColumnTypePrecisionScaleMockRecorder) ColumnTypePrecisionScale(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypePrecisionScale", reflect.TypeOf((*MockRowsColumnTypePrecisionScale)(nil).ColumnTypePrecisionScale), index)
}

// MockTx is a mock of Tx interface
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// Rollback mocks base method
func (m *MockTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
}
