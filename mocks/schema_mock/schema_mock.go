// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rebel-l/schema (interfaces: Applier,Scripter)

// Package schema_mock is a generated GoMock package.
package schema_mock

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/rebel-l/schema/store"
	reflect "reflect"
)

// MockApplier is a mock of Applier interface
type MockApplier struct {
	ctrl     *gomock.Controller
	recorder *MockApplierMockRecorder
}

// MockApplierMockRecorder is the mock recorder for MockApplier
type MockApplierMockRecorder struct {
	mock *MockApplier
}

// NewMockApplier creates a new mock instance
func NewMockApplier(ctrl *gomock.Controller) *MockApplier {
	mock := &MockApplier{ctrl: ctrl}
	mock.recorder = &MockApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplier) EXPECT() *MockApplierMockRecorder {
	return m.recorder
}

// ApplyScript mocks base method
func (m *MockApplier) ApplyScript(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyScript", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyScript indicates an expected call of ApplyScript
func (mr *MockApplierMockRecorder) ApplyScript(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyScript", reflect.TypeOf((*MockApplier)(nil).ApplyScript), arg0)
}

// Init mocks base method
func (m *MockApplier) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockApplierMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockApplier)(nil).Init))
}

// RevertScript mocks base method
func (m *MockApplier) RevertScript(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertScript", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevertScript indicates an expected call of RevertScript
func (mr *MockApplierMockRecorder) RevertScript(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertScript", reflect.TypeOf((*MockApplier)(nil).RevertScript), arg0)
}

// MockScripter is a mock of Scripter interface
type MockScripter struct {
	ctrl     *gomock.Controller
	recorder *MockScripterMockRecorder
}

// MockScripterMockRecorder is the mock recorder for MockScripter
type MockScripterMockRecorder struct {
	mock *MockScripter
}

// NewMockScripter creates a new mock instance
func NewMockScripter(ctrl *gomock.Controller) *MockScripter {
	mock := &MockScripter{ctrl: ctrl}
	mock.recorder = &MockScripterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScripter) EXPECT() *MockScripterMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockScripter) Add(arg0 *store.SchemaScript) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockScripterMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockScripter)(nil).Add), arg0)
}

// GetAll mocks base method
func (m *MockScripter) GetAll() (store.SchemaScriptCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(store.SchemaScriptCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockScripterMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockScripter)(nil).GetAll))
}

// Remove mocks base method
func (m *MockScripter) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockScripterMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockScripter)(nil).Remove), arg0)
}
